$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 (" clk $end
  $var wire 32 -" dmem_addr [31:0] $end
  $var wire 32 ." dmem_rdata [31:0] $end
  $var wire  1 0" dmem_valid $end
  $var wire 32 /" dmem_wdata [31:0] $end
  $var wire  4 1" dmem_wen [3:0] $end
  $var wire 32 *" imem_addr [31:0] $end
  $var wire 32 +" imem_rdata [31:0] $end
  $var wire  1 ," imem_valid $end
  $var wire  1 )" rst $end
  $scope module top $end
   $var wire 32 4" DMEM_BASE [31:0] $end
   $var wire 32 % a0_value [31:0] $end
   $var wire  1 (" clk $end
   $var wire 32 -" dmem_addr [31:0] $end
   $var wire 32 ." dmem_rdata [31:0] $end
   $var wire  1 0" dmem_valid $end
   $var wire 32 /" dmem_wdata [31:0] $end
   $var wire  4 1" dmem_wen [3:0] $end
   $var wire  1 & dpi_terminate $end
   $var wire  4 ] ex_alu_op [3:0] $end
   $var wire 32 m ex_alu_result [31:0] $end
   $var wire  1 _ ex_branch $end
   $var wire  1 n ex_branch_taken $end
   $var wire 32 p ex_branch_target [31:0] $end
   $var wire 12 g ex_csr_addr [11:0] $end
   $var wire  1 i ex_csr_imm $end
   $var wire  2 j ex_csr_op [1:0] $end
   $var wire  1 e ex_csr_ren $end
   $var wire  1 f ex_csr_wen $end
   $var wire 32 r ex_csr_write_data [31:0] $end
   $var wire  3 q ex_funct3 [2:0] $end
   $var wire  1 h ex_illegal_instr $end
   $var wire 32 Y ex_imm [31:0] $end
   $var wire 32 S ex_instr [31:0] $end
   $var wire  1 a ex_is_jalr $end
   $var wire  1 ` ex_jump $end
   $var wire  1 \ ex_mem_ren $end
   $var wire  3 b ex_mem_type [2:0] $end
   $var wire  1 c ex_mem_unsigned $end
   $var wire  1 [ ex_mem_wen $end
   $var wire 32 R ex_pc [31:0] $end
   $var wire  5 X ex_rd [4:0] $end
   $var wire  1 Z ex_reg_wen $end
   $var wire  5 V ex_rs1 [4:0] $end
   $var wire 32 T ex_rs1_data [31:0] $end
   $var wire  5 W ex_rs2 [4:0] $end
   $var wire 32 U ex_rs2_data [31:0] $end
   $var wire 32 o ex_store_data [31:0] $end
   $var wire  1 ^ ex_use_imm $end
   $var wire  2 d ex_wb_sel [1:0] $end
   $var wire  4 . exception_code [3:0] $end
   $var wire 32 / exception_pc [31:0] $end
   $var wire  1 1 exception_redirect $end
   $var wire 32 2 exception_target [31:0] $end
   $var wire 32 0 exception_val [31:0] $end
   $var wire  1 - exception_valid $end
   $var wire  1 * flush_ex $end
   $var wire  1 ) flush_id $end
   $var wire  1 ) flush_if $end
   $var wire  1 + flush_mem $end
   $var wire  2 k forward_a [1:0] $end
   $var wire  2 l forward_b [1:0] $end
   $var wire  4 A id_alu_op [3:0] $end
   $var wire  1 C id_branch $end
   $var wire 12 K id_csr_addr [11:0] $end
   $var wire  1 N id_csr_imm $end
   $var wire  2 M id_csr_op [1:0] $end
   $var wire  1 I id_csr_ren $end
   $var wire  1 J id_csr_wen $end
   $var wire  1 L id_illegal_instr $end
   $var wire 32 = id_imm [31:0] $end
   $var wire 32 7 id_instr [31:0] $end
   $var wire  1 E id_is_jalr $end
   $var wire  1 D id_jump $end
   $var wire  1 @ id_mem_ren $end
   $var wire  3 F id_mem_type [2:0] $end
   $var wire  1 G id_mem_unsigned $end
   $var wire  1 ? id_mem_wen $end
   $var wire 32 6 id_pc [31:0] $end
   $var wire  5 : id_rd [4:0] $end
   $var wire  1 > id_reg_wen $end
   $var wire  5 8 id_rs1 [4:0] $end
   $var wire 32 ; id_rs1_data [31:0] $end
   $var wire  5 9 id_rs2 [4:0] $end
   $var wire 32 < id_rs2_data [31:0] $end
   $var wire  1 B id_use_imm $end
   $var wire  2 H id_wb_sel [1:0] $end
   $var wire  1 ( idex_bubble $end
   $var wire  1 , if_flush $end
   $var wire 32 +" if_instr [31:0] $end
   $var wire 32 *" if_pc [31:0] $end
   $var wire  1 , ifid_flush $end
   $var wire  1 ( ifid_stall $end
   $var wire 32 *" imem_addr [31:0] $end
   $var wire 32 +" imem_rdata [31:0] $end
   $var wire  1 ," imem_valid $end
   $var wire  1 $ is_ebreak $end
   $var wire  1 # is_ecall $end
   $var wire 32 u mem_alu_result [31:0] $end
   $var wire  1 } mem_branch_taken $end
   $var wire 12 &! mem_csr_addr [11:0] $end
   $var wire  1 (! mem_csr_imm $end
   $var wire  2 '! mem_csr_op [1:0] $end
   $var wire 32 *! mem_csr_rdata [31:0] $end
   $var wire  1 $! mem_csr_ren $end
   $var wire  1 %! mem_csr_wen $end
   $var wire 32 )! mem_csr_write_data [31:0] $end
   $var wire  3 ~ mem_funct3 [2:0] $end
   $var wire 32 t mem_instr [31:0] $end
   $var wire  1 | mem_mem_ren $end
   $var wire  3 !! mem_mem_type [2:0] $end
   $var wire  1 "! mem_mem_unsigned $end
   $var wire  1 { mem_mem_wen $end
   $var wire 32 s mem_pc [31:0] $end
   $var wire  5 y mem_rd [4:0] $end
   $var wire 32 2" mem_read_data [31:0] $end
   $var wire  1 z mem_reg_wen $end
   $var wire  5 w mem_rs1 [4:0] $end
   $var wire  5 x mem_rs2 [4:0] $end
   $var wire 32 v mem_rs2_data [31:0] $end
   $var wire  2 #! mem_wb_sel [1:0] $end
   $var wire 32 3" mem_write_data [31:0] $end
   $var wire 32 4 pc [31:0] $end
   $var wire 32 5 pc_plus4 [31:0] $end
   $var wire  1 ( pc_stall $end
   $var wire  1 + pipeline_flush_exc $end
   $var wire  1 )" rst $end
   $var wire  1 5" stall_ex $end
   $var wire  1 ( stall_id $end
   $var wire  1 ( stall_if $end
   $var wire  1 5" stall_mem $end
   $var wire  1 5" stall_wb $end
   $var wire 32 3 trap_vector [31:0] $end
   $var wire 32 -! wb_alu_result [31:0] $end
   $var wire 12 6! wb_csr_addr [11:0] $end
   $var wire  1 8! wb_csr_imm $end
   $var wire  2 7! wb_csr_op [1:0] $end
   $var wire 32 3! wb_csr_rdata [31:0] $end
   $var wire  1 4! wb_csr_ren $end
   $var wire  1 5! wb_csr_wen $end
   $var wire 32 9! wb_csr_write_data [31:0] $end
   $var wire 32 O wb_data [31:0] $end
   $var wire 32 ,! wb_instr [31:0] $end
   $var wire 32 .! wb_mem_rdata [31:0] $end
   $var wire  1 0! wb_mem_ren $end
   $var wire  1 2! wb_mem_unsigned $end
   $var wire 32 +! wb_pc [31:0] $end
   $var wire  5 P wb_rd [4:0] $end
   $var wire  5 P wb_rd_final [4:0] $end
   $var wire  1 /! wb_reg_wen $end
   $var wire  1 Q wb_reg_wen_final $end
   $var wire  1 ' wb_valid $end
   $var wire  2 1! wb_wb_sel [1:0] $end
   $scope module csr_file $end
    $var wire 12 >" CSR_MCAUSE [11:0] $end
    $var wire 12 A" CSR_MCYCLE [11:0] $end
    $var wire 12 B" CSR_MCYCLEH [11:0] $end
    $var wire 12 8" CSR_MEDELEG [11:0] $end
    $var wire 12 =" CSR_MEPC [11:0] $end
    $var wire 12 9" CSR_MIDELEG [11:0] $end
    $var wire 12 :" CSR_MIE [11:0] $end
    $var wire 12 @" CSR_MIP [11:0] $end
    $var wire 12 7" CSR_MISA [11:0] $end
    $var wire 12 <" CSR_MSCRATCH [11:0] $end
    $var wire 12 6" CSR_MSTATUS [11:0] $end
    $var wire 12 ?" CSR_MTVAL [11:0] $end
    $var wire 12 ;" CSR_MTVEC [11:0] $end
    $var wire  4 F" EXC_BREAKPOINT [3:0] $end
    $var wire  4 M" EXC_ECALL_FROM_MMODE [3:0] $end
    $var wire  4 L" EXC_ECALL_FROM_SMODE [3:0] $end
    $var wire  4 K" EXC_ECALL_FROM_UMODE [3:0] $end
    $var wire  4 E" EXC_ILLEGAL_INSTRUCTION [3:0] $end
    $var wire  4 D" EXC_INSTR_ACCESS_FAULT [3:0] $end
    $var wire  4 C" EXC_INSTR_ADDR_MISALIGNED [3:0] $end
    $var wire  4 H" EXC_LOAD_ACCESS_FAULT [3:0] $end
    $var wire  4 G" EXC_LOAD_ADDR_MISALIGNED [3:0] $end
    $var wire  4 J" EXC_STORE_ACCESS_FAULT [3:0] $end
    $var wire  4 I" EXC_STORE_ADDR_MISALIGNED [3:0] $end
    $var wire  1 (" clk $end
    $var wire  2 '! csr_op [1:0] $end
    $var wire  1 - exception $end
    $var wire  4 . exception_code [3:0] $end
    $var wire 32 / exception_pc [31:0] $end
    $var wire 32 0 exception_val [31:0] $end
    $var wire 32 >! mcause [31:0] $end
    $var wire 32 @! mcycle [31:0] $end
    $var wire 32 A! mcycleh [31:0] $end
    $var wire 32 =! mepc [31:0] $end
    $var wire 32 ;! misa [31:0] $end
    $var wire 32 <! mscratch [31:0] $end
    $var wire 32 :! mstatus [31:0] $end
    $var wire 32 ?! mtval [31:0] $end
    $var wire 32 3 mtvec [31:0] $end
    $var wire 12 &! read_addr [11:0] $end
    $var wire 32 *! read_data [31:0] $end
    $var wire  1 $! read_en $end
    $var wire  1 )" rst $end
    $var wire 32 3 trap_vector [31:0] $end
    $var wire 12 &! write_addr [11:0] $end
    $var wire 32 )! write_data [31:0] $end
    $var wire  1 %! write_en $end
   $upscope $end
   $scope module dpi_system $end
    $var wire 32 % a0_value [31:0] $end
    $var wire  1 (" clk $end
    $var wire  1 C! ebreak_handled $end
    $var wire  1 B! ecall_handled $end
    $var wire  1 $ is_ebreak $end
    $var wire  1 # is_ecall $end
    $var wire  1 )" rst $end
    $var wire  1 & terminate $end
    $var wire  1 & terminate_reg $end
    $var wire  1 ' valid $end
   $upscope $end
   $scope module exception_handler $end
    $var wire  4 E" EXC_ILLEGAL_INSTRUCTION [3:0] $end
    $var wire  1 (" clk $end
    $var wire  4 E! detected_exception_code [3:0] $end
    $var wire 32 F! detected_exception_val [31:0] $end
    $var wire  4 . exception_code [3:0] $end
    $var wire  1 D! exception_detected $end
    $var wire 32 / exception_pc [31:0] $end
    $var wire 32 0 exception_val [31:0] $end
    $var wire  1 - exception_valid $end
    $var wire  1 G! handling_exception $end
    $var wire  1 L id_illegal_instr $end
    $var wire 32 7 id_instr [31:0] $end
    $var wire 32 6 id_pc [31:0] $end
    $var wire 32 2 new_pc [31:0] $end
    $var wire  1 + pipeline_flush $end
    $var wire  1 1 redirect_pc $end
    $var wire  1 )" rst $end
    $var wire 32 3 trap_vector [31:0] $end
    $var wire 32 ,! wb_instr [31:0] $end
    $var wire 32 +! wb_pc [31:0] $end
    $var wire  1 N" wb_valid $end
   $upscope $end
   $scope module exu $end
    $var wire  4 C" ALU_ADD [3:0] $end
    $var wire  4 E" ALU_AND [3:0] $end
    $var wire  4 M" ALU_COPY_A [3:0] $end
    $var wire  4 P" ALU_COPY_B [3:0] $end
    $var wire  4 O" ALU_LUI [3:0] $end
    $var wire  4 F" ALU_OR [3:0] $end
    $var wire  4 H" ALU_SLL [3:0] $end
    $var wire  4 K" ALU_SLT [3:0] $end
    $var wire  4 L" ALU_SLTU [3:0] $end
    $var wire  4 J" ALU_SRA [3:0] $end
    $var wire  4 I" ALU_SRL [3:0] $end
    $var wire  4 D" ALU_SUB [3:0] $end
    $var wire  4 G" ALU_XOR [3:0] $end
    $var wire 32 m alu_result [31:0] $end
    $var wire 32 m alu_result_reg [31:0] $end
    $var wire 32 H! alu_src1 [31:0] $end
    $var wire 32 I! alu_src2 [31:0] $end
    $var wire  1 n branch_taken $end
    $var wire  1 n branch_taken_reg $end
    $var wire 32 p branch_target [31:0] $end
    $var wire 32 p branch_target_reg [31:0] $end
    $var wire  1 (" clk $end
    $var wire 32 r csr_write_data [31:0] $end
    $var wire 32 r csr_write_data_reg [31:0] $end
    $var wire  4 ] ex_alu_op [3:0] $end
    $var wire  1 _ ex_branch $end
    $var wire 12 g ex_csr_addr [11:0] $end
    $var wire  1 i ex_csr_imm $end
    $var wire  2 j ex_csr_op [1:0] $end
    $var wire  1 e ex_csr_ren $end
    $var wire  1 f ex_csr_wen $end
    $var wire 32 Y ex_imm [31:0] $end
    $var wire 32 S ex_instr [31:0] $end
    $var wire  1 a ex_is_jalr $end
    $var wire  1 ` ex_jump $end
    $var wire  1 \ ex_mem_ren $end
    $var wire  3 b ex_mem_type [2:0] $end
    $var wire  1 c ex_mem_unsigned $end
    $var wire  1 [ ex_mem_wen $end
    $var wire 32 R ex_pc [31:0] $end
    $var wire  5 X ex_rd [4:0] $end
    $var wire  1 Z ex_reg_wen $end
    $var wire  5 V ex_rs1 [4:0] $end
    $var wire 32 T ex_rs1_data [31:0] $end
    $var wire  5 W ex_rs2 [4:0] $end
    $var wire 32 U ex_rs2_data [31:0] $end
    $var wire  1 ^ ex_use_imm $end
    $var wire  2 d ex_wb_sel [1:0] $end
    $var wire 32 L! final_alu_src1 [31:0] $end
    $var wire  2 k forward_a [1:0] $end
    $var wire  2 l forward_b [1:0] $end
    $var wire 32 o forwarded_rs2_data [31:0] $end
    $var wire  3 q funct3 [2:0] $end
    $var wire  1 J! is_auipc $end
    $var wire  1 K! is_jal $end
    $var wire 32 u mem_alu_result [31:0] $end
    $var wire  1 )" rst $end
    $var wire 32 o store_data [31:0] $end
    $var wire 32 O wb_data [31:0] $end
   $upscope $end
   $scope module forwarding_unit $end
    $var wire  5 V ex_rs1 [4:0] $end
    $var wire  5 W ex_rs2 [4:0] $end
    $var wire  2 k forward_a [1:0] $end
    $var wire  2 l forward_b [1:0] $end
    $var wire  5 y mem_rd [4:0] $end
    $var wire  1 z mem_reg_wen $end
    $var wire  5 P wb_rd [4:0] $end
    $var wire  1 /! wb_reg_wen $end
   $upscope $end
   $scope module hazard_unit $end
    $var wire  1 , control_hazard $end
    $var wire  1 n ex_branch_taken $end
    $var wire  1 ` ex_jump $end
    $var wire  1 \ ex_mem_read $end
    $var wire  5 X ex_rd [4:0] $end
    $var wire  5 8 id_rs1 [4:0] $end
    $var wire  5 9 id_rs2 [4:0] $end
    $var wire  1 ( idex_bubble $end
    $var wire  1 , if_flush $end
    $var wire  1 , ifid_flush $end
    $var wire  1 ( ifid_stall $end
    $var wire  1 ( load_use_hazard $end
    $var wire  1 ( pc_stall $end
   $upscope $end
   $scope module idu $end
    $var wire  4 C" ALU_ADD [3:0] $end
    $var wire  4 E" ALU_AND [3:0] $end
    $var wire  4 M" ALU_COPY_A [3:0] $end
    $var wire  4 P" ALU_COPY_B [3:0] $end
    $var wire  4 O" ALU_LUI [3:0] $end
    $var wire  4 F" ALU_OR [3:0] $end
    $var wire  4 H" ALU_SLL [3:0] $end
    $var wire  4 K" ALU_SLT [3:0] $end
    $var wire  4 L" ALU_SLTU [3:0] $end
    $var wire  4 J" ALU_SRA [3:0] $end
    $var wire  4 I" ALU_SRL [3:0] $end
    $var wire  4 D" ALU_SUB [3:0] $end
    $var wire  4 G" ALU_XOR [3:0] $end
    $var wire  4 A alu_op [3:0] $end
    $var wire  4 A alu_op_val [3:0] $end
    $var wire 32 ^! b_imm [31:0] $end
    $var wire  1 C branch $end
    $var wire  1 (" clk $end
    $var wire 12 K csr_addr [11:0] $end
    $var wire  1 N csr_imm $end
    $var wire  2 M csr_op [1:0] $end
    $var wire  2 M csr_op_val [1:0] $end
    $var wire  1 I csr_ren $end
    $var wire  1 J csr_wen $end
    $var wire 32 a! csr_zimm [31:0] $end
    $var wire 12 K funct12 [11:0] $end
    $var wire  3 N! funct3 [2:0] $end
    $var wire  7 O! funct7 [6:0] $end
    $var wire 32 \! i_imm [31:0] $end
    $var wire 32 7 id_instr [31:0] $end
    $var wire 32 6 id_pc [31:0] $end
    $var wire  1 L illegal_instr $end
    $var wire  1 L illegal_instr_reg $end
    $var wire 32 = imm [31:0] $end
    $var wire 32 = imm_val [31:0] $end
    $var wire  1 [! is_auipc $end
    $var wire  1 C is_b_type $end
    $var wire  1 I is_csr $end
    $var wire  1 N is_csr_imm $end
    $var wire  1 U! is_csrrc $end
    $var wire  1 T! is_csrrs $end
    $var wire  1 S! is_csrrw $end
    $var wire  1 P! is_ebreak $end
    $var wire  1 Q! is_ecall $end
    $var wire  1 R! is_fence $end
    $var wire  1 W! is_i_type $end
    $var wire  1 Y! is_j_type $end
    $var wire  1 Y! is_jal $end
    $var wire  1 E is_jalr $end
    $var wire  1 @ is_load $end
    $var wire  1 Z! is_lui $end
    $var wire  1 V! is_r_type $end
    $var wire  1 ? is_s_type $end
    $var wire  1 ? is_store $end
    $var wire  1 X! is_u_type $end
    $var wire 32 `! j_imm [31:0] $end
    $var wire  1 D jump $end
    $var wire  1 @ mem_ren $end
    $var wire  3 F mem_type [2:0] $end
    $var wire  3 F mem_type_val [2:0] $end
    $var wire  1 G mem_unsigned $end
    $var wire  1 G mem_unsigned_val $end
    $var wire  1 ? mem_wen $end
    $var wire  7 M! opcode [6:0] $end
    $var wire  5 : rd [4:0] $end
    $var wire  1 > reg_wen $end
    $var wire  5 8 rs1 [4:0] $end
    $var wire 32 ; rs1_data [31:0] $end
    $var wire  5 9 rs2 [4:0] $end
    $var wire 32 < rs2_data [31:0] $end
    $var wire  1 )" rst $end
    $var wire 32 ]! s_imm [31:0] $end
    $var wire 32 _! u_imm [31:0] $end
    $var wire  1 B use_imm $end
    $var wire  2 H wb_sel [1:0] $end
    $var wire  2 H wb_sel_val [1:0] $end
   $upscope $end
   $scope module ifu $end
    $var wire  1 n branch_taken $end
    $var wire 32 p branch_target [31:0] $end
    $var wire  1 (" clk $end
    $var wire 32 +" if_instr [31:0] $end
    $var wire 32 *" if_pc [31:0] $end
    $var wire 32 *" imem_addr [31:0] $end
    $var wire 32 +" imem_rdata [31:0] $end
    $var wire  1 ," imem_valid $end
    $var wire 32 4 pc [31:0] $end
    $var wire 32 5 pc_plus4 [31:0] $end
    $var wire  1 )" rst $end
    $var wire  1 ( stall $end
   $upscope $end
   $scope module memu $end
    $var wire  2 Q" BYTE [1:0] $end
    $var wire  2 R" HALF [1:0] $end
    $var wire  2 S" WORD [1:0] $end
    $var wire  4 c! byte_en [3:0] $end
    $var wire  1 (" clk $end
    $var wire 32 -" dmem_addr [31:0] $end
    $var wire 32 ." dmem_rdata [31:0] $end
    $var wire  1 0" dmem_valid $end
    $var wire 32 /" dmem_wdata [31:0] $end
    $var wire  4 1" dmem_wen [3:0] $end
    $var wire 32 u mem_alu_result [31:0] $end
    $var wire 32 *! mem_csr_rdata [31:0] $end
    $var wire  3 b! mem_funct3 [2:0] $end
    $var wire 32 t mem_instr [31:0] $end
    $var wire  1 | mem_mem_ren $end
    $var wire  3 !! mem_mem_type [2:0] $end
    $var wire  1 "! mem_mem_unsigned $end
    $var wire  1 { mem_mem_wen $end
    $var wire 32 s mem_pc [31:0] $end
    $var wire  5 y mem_rd [4:0] $end
    $var wire 32 2" mem_read_data [31:0] $end
    $var wire  1 z mem_reg_wen $end
    $var wire 32 v mem_rs2_data [31:0] $end
    $var wire  2 #! mem_wb_sel [1:0] $end
    $var wire  1 )" rst $end
    $var wire 32 3" wb_data [31:0] $end
   $upscope $end
   $scope module pc_reg $end
    $var wire  1 n branch_taken $end
    $var wire 32 p branch_target [31:0] $end
    $var wire  1 (" clk $end
    $var wire  1 1 exception_redirect $end
    $var wire 32 2 exception_target [31:0] $end
    $var wire 32 4 pc [31:0] $end
    $var wire 32 5 pc_plus4 [31:0] $end
    $var wire  1 )" rst $end
    $var wire  1 ( stall $end
   $upscope $end
   $scope module pipe_reg_ex_mem $end
    $var wire  1 (" clk $end
    $var wire 32 m ex_alu_result [31:0] $end
    $var wire  1 n ex_branch_taken $end
    $var wire 12 g ex_csr_addr [11:0] $end
    $var wire  1 i ex_csr_imm $end
    $var wire  2 j ex_csr_op [1:0] $end
    $var wire  1 e ex_csr_ren $end
    $var wire  1 f ex_csr_wen $end
    $var wire 32 r ex_csr_write_data [31:0] $end
    $var wire  3 q ex_funct3 [2:0] $end
    $var wire 32 S ex_instr [31:0] $end
    $var wire  1 \ ex_mem_ren $end
    $var wire  3 b ex_mem_type [2:0] $end
    $var wire  1 c ex_mem_unsigned $end
    $var wire  1 [ ex_mem_wen $end
    $var wire 32 R ex_pc [31:0] $end
    $var wire  5 X ex_rd [4:0] $end
    $var wire  1 Z ex_reg_wen $end
    $var wire  5 V ex_rs1 [4:0] $end
    $var wire  5 W ex_rs2 [4:0] $end
    $var wire 32 o ex_rs2_data [31:0] $end
    $var wire  2 d ex_wb_sel [1:0] $end
    $var wire  1 + flush $end
    $var wire 32 u mem_alu_result [31:0] $end
    $var wire  1 } mem_branch_taken $end
    $var wire 12 &! mem_csr_addr [11:0] $end
    $var wire  1 (! mem_csr_imm $end
    $var wire  2 '! mem_csr_op [1:0] $end
    $var wire  1 $! mem_csr_ren $end
    $var wire  1 %! mem_csr_wen $end
    $var wire 32 )! mem_csr_write_data [31:0] $end
    $var wire  3 ~ mem_funct3 [2:0] $end
    $var wire 32 t mem_instr [31:0] $end
    $var wire  1 | mem_mem_ren $end
    $var wire  3 !! mem_mem_type [2:0] $end
    $var wire  1 "! mem_mem_unsigned $end
    $var wire  1 { mem_mem_wen $end
    $var wire 32 s mem_pc [31:0] $end
    $var wire  5 y mem_rd [4:0] $end
    $var wire  1 z mem_reg_wen $end
    $var wire  5 w mem_rs1 [4:0] $end
    $var wire  5 x mem_rs2 [4:0] $end
    $var wire 32 v mem_rs2_data [31:0] $end
    $var wire  2 #! mem_wb_sel [1:0] $end
    $var wire  1 )" rst $end
    $var wire  1 5" stall $end
   $upscope $end
   $scope module pipe_reg_id_ex $end
    $var wire  1 ( bubble $end
    $var wire  1 (" clk $end
    $var wire  4 ] ex_alu_op [3:0] $end
    $var wire  1 _ ex_branch $end
    $var wire 12 g ex_csr_addr [11:0] $end
    $var wire  1 i ex_csr_imm $end
    $var wire  2 j ex_csr_op [1:0] $end
    $var wire  1 e ex_csr_ren $end
    $var wire  1 f ex_csr_wen $end
    $var wire  1 h ex_illegal_instr $end
    $var wire 32 Y ex_imm [31:0] $end
    $var wire 32 S ex_instr [31:0] $end
    $var wire  1 a ex_is_jalr $end
    $var wire  1 ` ex_jump $end
    $var wire  1 \ ex_mem_ren $end
    $var wire  3 b ex_mem_type [2:0] $end
    $var wire  1 c ex_mem_unsigned $end
    $var wire  1 [ ex_mem_wen $end
    $var wire 32 R ex_pc [31:0] $end
    $var wire  5 X ex_rd [4:0] $end
    $var wire  1 Z ex_reg_wen $end
    $var wire  5 V ex_rs1 [4:0] $end
    $var wire 32 T ex_rs1_data [31:0] $end
    $var wire  5 W ex_rs2 [4:0] $end
    $var wire 32 U ex_rs2_data [31:0] $end
    $var wire  1 ^ ex_use_imm $end
    $var wire  2 d ex_wb_sel [1:0] $end
    $var wire  1 * flush $end
    $var wire  4 A id_alu_op [3:0] $end
    $var wire  1 C id_branch $end
    $var wire 12 K id_csr_addr [11:0] $end
    $var wire  1 N id_csr_imm $end
    $var wire  2 M id_csr_op [1:0] $end
    $var wire  1 I id_csr_ren $end
    $var wire  1 J id_csr_wen $end
    $var wire  1 L id_illegal_instr $end
    $var wire 32 = id_imm [31:0] $end
    $var wire 32 7 id_instr [31:0] $end
    $var wire  1 E id_is_jalr $end
    $var wire  1 D id_jump $end
    $var wire  1 @ id_mem_ren $end
    $var wire  3 F id_mem_type [2:0] $end
    $var wire  1 G id_mem_unsigned $end
    $var wire  1 ? id_mem_wen $end
    $var wire 32 6 id_pc [31:0] $end
    $var wire  5 : id_rd [4:0] $end
    $var wire  1 > id_reg_wen $end
    $var wire  5 8 id_rs1 [4:0] $end
    $var wire 32 ; id_rs1_data [31:0] $end
    $var wire  5 9 id_rs2 [4:0] $end
    $var wire 32 < id_rs2_data [31:0] $end
    $var wire  1 B id_use_imm $end
    $var wire  2 H id_wb_sel [1:0] $end
    $var wire  1 )" rst $end
    $var wire  1 5" stall $end
   $upscope $end
   $scope module pipe_reg_if_id $end
    $var wire  1 (" clk $end
    $var wire  1 ) flush $end
    $var wire 32 7 id_instr [31:0] $end
    $var wire 32 6 id_pc [31:0] $end
    $var wire 32 +" if_instr [31:0] $end
    $var wire 32 *" if_pc [31:0] $end
    $var wire  1 )" rst $end
    $var wire  1 ( stall $end
   $upscope $end
   $scope module pipe_reg_mem_wb $end
    $var wire  1 (" clk $end
    $var wire  1 5" flush $end
    $var wire 32 u mem_alu_result [31:0] $end
    $var wire 12 &! mem_csr_addr [11:0] $end
    $var wire  1 (! mem_csr_imm $end
    $var wire  2 '! mem_csr_op [1:0] $end
    $var wire 32 *! mem_csr_rdata [31:0] $end
    $var wire  1 $! mem_csr_ren $end
    $var wire  1 %! mem_csr_wen $end
    $var wire 32 )! mem_csr_write_data [31:0] $end
    $var wire 32 t mem_instr [31:0] $end
    $var wire 32 2" mem_mem_rdata [31:0] $end
    $var wire  1 | mem_mem_ren $end
    $var wire  1 "! mem_mem_unsigned $end
    $var wire 32 s mem_pc [31:0] $end
    $var wire  5 y mem_rd [4:0] $end
    $var wire  1 z mem_reg_wen $end
    $var wire  2 #! mem_wb_sel [1:0] $end
    $var wire  1 )" rst $end
    $var wire  1 5" stall $end
    $var wire 32 -! wb_alu_result [31:0] $end
    $var wire 12 6! wb_csr_addr [11:0] $end
    $var wire  1 8! wb_csr_imm $end
    $var wire  2 7! wb_csr_op [1:0] $end
    $var wire 32 3! wb_csr_rdata [31:0] $end
    $var wire  1 4! wb_csr_ren $end
    $var wire  1 5! wb_csr_wen $end
    $var wire 32 9! wb_csr_write_data [31:0] $end
    $var wire 32 ,! wb_instr [31:0] $end
    $var wire 32 .! wb_mem_rdata [31:0] $end
    $var wire  1 0! wb_mem_ren $end
    $var wire  1 2! wb_mem_unsigned $end
    $var wire 32 +! wb_pc [31:0] $end
    $var wire  5 P wb_rd [4:0] $end
    $var wire  1 /! wb_reg_wen $end
    $var wire  2 1! wb_wb_sel [1:0] $end
   $upscope $end
   $scope module regfile $end
    $var wire 32 d! a0_value [31:0] $end
    $var wire  1 (" clk $end
    $var wire 32 '" i [31:0] $end
    $var wire  5 P rd [4:0] $end
    $var wire 32 e! registers[0] [31:0] $end
    $var wire 32 o! registers[10] [31:0] $end
    $var wire 32 p! registers[11] [31:0] $end
    $var wire 32 q! registers[12] [31:0] $end
    $var wire 32 r! registers[13] [31:0] $end
    $var wire 32 s! registers[14] [31:0] $end
    $var wire 32 t! registers[15] [31:0] $end
    $var wire 32 u! registers[16] [31:0] $end
    $var wire 32 v! registers[17] [31:0] $end
    $var wire 32 w! registers[18] [31:0] $end
    $var wire 32 x! registers[19] [31:0] $end
    $var wire 32 f! registers[1] [31:0] $end
    $var wire 32 y! registers[20] [31:0] $end
    $var wire 32 z! registers[21] [31:0] $end
    $var wire 32 {! registers[22] [31:0] $end
    $var wire 32 |! registers[23] [31:0] $end
    $var wire 32 }! registers[24] [31:0] $end
    $var wire 32 ~! registers[25] [31:0] $end
    $var wire 32 !" registers[26] [31:0] $end
    $var wire 32 "" registers[27] [31:0] $end
    $var wire 32 #" registers[28] [31:0] $end
    $var wire 32 $" registers[29] [31:0] $end
    $var wire 32 g! registers[2] [31:0] $end
    $var wire 32 %" registers[30] [31:0] $end
    $var wire 32 &" registers[31] [31:0] $end
    $var wire 32 h! registers[3] [31:0] $end
    $var wire 32 i! registers[4] [31:0] $end
    $var wire 32 j! registers[5] [31:0] $end
    $var wire 32 k! registers[6] [31:0] $end
    $var wire 32 l! registers[7] [31:0] $end
    $var wire 32 m! registers[8] [31:0] $end
    $var wire 32 n! registers[9] [31:0] $end
    $var wire  5 8 rs1 [4:0] $end
    $var wire 32 ; rs1_data [31:0] $end
    $var wire  5 9 rs2 [4:0] $end
    $var wire 32 < rs2_data [31:0] $end
    $var wire  1 )" rst $end
    $var wire 32 O wdata [31:0] $end
    $var wire  1 Q we $end
   $upscope $end
   $scope module wbu $end
    $var wire  1 (" clk $end
    $var wire  1 )" rst $end
    $var wire 32 -! wb_alu_result [31:0] $end
    $var wire 32 3! wb_csr_rdata [31:0] $end
    $var wire 32 O wb_data [31:0] $end
    $var wire 32 ,! wb_instr [31:0] $end
    $var wire 32 .! wb_mem_rdata [31:0] $end
    $var wire  1 2! wb_mem_unsigned $end
    $var wire 32 +! wb_pc [31:0] $end
    $var wire  5 P wb_rd [4:0] $end
    $var wire  5 P wb_rd_out [4:0] $end
    $var wire  1 /! wb_reg_wen $end
    $var wire  1 Q wb_reg_wen_out $end
    $var wire  2 1! wb_wb_sel [1:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
b00000000000000000000000000000000 %
0&
0'
0(
0)
0*
0+
0,
0-
b0000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
01
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000100 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000 8
b00000 9
b00000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
0>
0?
0@
b0000 A
0B
0C
0D
0E
b000 F
0G
b00 H
0I
0J
b000000000000 K
0L
b00 M
0N
b00000000000000000000000000000000 O
b00000 P
0Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000 V
b00000 W
b00000 X
b00000000000000000000000000000000 Y
0Z
0[
0\
b0000 ]
0^
0_
0`
0a
b000 b
0c
b00 d
0e
0f
b000000000000 g
0h
0i
b00 j
b00 k
b00 l
b00000000000000000000000000000000 m
0n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
b00000 w
b00000 x
b00000 y
0z
0{
0|
0}
b000 ~
b000 !!
0"!
b00 #!
0$!
0%!
b000000000000 &!
b00 '!
0(!
b00000000000000000000000000000000 )!
b00000000000000000000000000000000 *!
b00000000000000000000000000000000 +!
b00000000000000000000000000000000 ,!
b00000000000000000000000000000000 -!
b00000000000000000000000000000000 .!
0/!
00!
b00 1!
02!
b00000000000000000000000000000000 3!
04!
05!
b000000000000 6!
b00 7!
08!
b00000000000000000000000000000000 9!
b00000000000000000000000000000000 :!
b00000000000000000000000000000000 ;!
b00000000000000000000000000000000 <!
b00000000000000000000000000000000 =!
b00000000000000000000000000000000 >!
b00000000000000000000000000000000 ?!
b00000000000000000000000000000000 @!
b00000000000000000000000000000000 A!
0B!
0C!
0D!
b0000 E!
b00000000000000000000000000000000 F!
0G!
b00000000000000000000000000000000 H!
b00000000000000000000000000000000 I!
0J!
0K!
b00000000000000000000000000000000 L!
b0000000 M!
b000 N!
b0000000 O!
0P!
0Q!
0R!
0S!
0T!
0U!
0V!
0W!
0X!
0Y!
0Z!
0[!
b00000000000000000000000000000000 \!
b00000000000000000000000000000000 ]!
b00000000000000000000000000000000 ^!
b00000000000000000000000000000000 _!
b00000000000000000000000000000000 `!
b00000000000000000000000000000000 a!
b000 b!
b0000 c!
b00000000000000000000000000000000 d!
b00000000000000000000000000000000 e!
b00000000000000000000000000000000 f!
b00000000000000000000000000000000 g!
b00000000000000000000000000000000 h!
b00000000000000000000000000000000 i!
b00000000000000000000000000000000 j!
b00000000000000000000000000000000 k!
b00000000000000000000000000000000 l!
b00000000000000000000000000000000 m!
b00000000000000000000000000000000 n!
b00000000000000000000000000000000 o!
b00000000000000000000000000000000 p!
b00000000000000000000000000000000 q!
b00000000000000000000000000000000 r!
b00000000000000000000000000000000 s!
b00000000000000000000000000000000 t!
b00000000000000000000000000000000 u!
b00000000000000000000000000000000 v!
b00000000000000000000000000000000 w!
b00000000000000000000000000000000 x!
b00000000000000000000000000000000 y!
b00000000000000000000000000000000 z!
b00000000000000000000000000000000 {!
b00000000000000000000000000000000 |!
b00000000000000000000000000000000 }!
b00000000000000000000000000000000 ~!
b00000000000000000000000000000000 !"
b00000000000000000000000000000000 ""
b00000000000000000000000000000000 #"
b00000000000000000000000000000000 $"
b00000000000000000000000000000000 %"
b00000000000000000000000000000000 &"
b00000000000000000000000000000000 '"
1("
1)"
b00000000000000000000000000000000 *"
b00000000000000000000000000000000 +"
1,"
b00000000000000000000000000000000 -"
b00000000000000000000000000000000 ."
b00000000000000000000000000000000 /"
00"
b0000 1"
b00000000000000000000000000000000 2"
b00000000000000000000000000000000 3"
b10000000000100000000000000000000 4"
05"
b001100000000 6"
b001100000001 7"
b001100000010 8"
b001100000011 9"
b001100000100 :"
b001100000101 ;"
b001101000000 <"
b001101000001 ="
b001101000010 >"
b001101000011 ?"
b001101000100 @"
b101100000000 A"
b101110000000 B"
b0000 C"
b0001 D"
b0010 E"
b0011 F"
b0100 G"
b0101 H"
b0110 I"
b0111 J"
b1000 K"
b1001 L"
b1011 M"
1N"
b1010 O"
b1100 P"
b00 Q"
b01 R"
b10 S"
#1
0("
#2
b10000000000000000000000000000000 4
b10000000000000000000000000000100 5
b01000000000000000001000100000000 ;!
b00000000000000000000000000100000 '"
1("
b10000000000000000000000000000000 *"
#3
0("
0)"
#4
b10000000000000000000000000000100 4
b10000000000000000000000000001000 5
b10000000000000000000000000000000 6
b00000000101000000000000010010011 7
b01010 9
b00001 :
b00000000000000000000000000001010 =
1>
1B
b000000001010 K
b00000000000000000000000000000001 @!
b0010011 M!
1W!
b00000000000000000000000000001010 \!
b00000000000000000000000000000001 ]!
b00000000000000000000100000000000 ^!
b00000000101000000000000000000000 _!
b00000000000000000000000000001010 `!
1("
b10000000000000000000000000000100 *"
b00000000101000000000000010010011 +"
#5
0("
#6
b10000000000000000000000000001000 4
b10000000000000000000000000001100 5
b10000000000000000000000000000100 6
b00000001010000000000000100010011 7
b10100 9
b00010 :
b00000000000000000000000000010100 =
b000000010100 K
b10000000000000000000000000000000 R
b00000000101000000000000010010011 S
b01010 W
b00001 X
b00000000000000000000000000001010 Y
1Z
1^
b000000001010 g
b00000000000000000000000000001010 m
b10000000000000000000000000001010 p
b00000000000000000000000000000010 @!
b00000000000000000000000000001010 I!
b00000000000000000000000000010100 \!
b00000000000000000000000000000010 ]!
b00000000000000000000000000000010 ^!
b00000001010000000000000000000000 _!
b00000000000000000000000000010100 `!
1("
b10000000000000000000000000001000 *"
b00000001010000000000000100010011 +"
#7
0("
#8
b10000000000000000000000000001100 4
b10000000000000000000000000010000 5
b10000000000000000000000000001000 6
b00000000001000001000000110110011 7
b00001 8
b00010 9
b00011 :
b00000000000000000000000000000000 =
0B
b000000000010 K
b10000000000000000000000000000100 R
b00000001010000000000000100010011 S
b10100 W
b00010 X
b00000000000000000000000000010100 Y
b000000010100 g
b00000000000000000000000000010100 m
b10000000000000000000000000011000 p
b10000000000000000000000000000000 s
b00000000101000000000000010010011 t
b00000000000000000000000000001010 u
b01010 x
b00001 y
1z
b000000001010 &!
b00000000000000000000000000000011 @!
b00000000000000000000000000010100 I!
b0110011 M!
1V!
0W!
b00000000000000000000000000000010 \!
b00000000000000000000000000000011 ]!
b00000000000000000000100000000010 ^!
b00000000001000001000000000000000 _!
b00000000000000001000000000000010 `!
b00000000000000000000000000000001 a!
1("
b10000000000000000000000000001100 *"
b00000000001000001000000110110011 +"
b00000000000000000000000000001010 -"
b00000000000000000000000000001010 3"
#9
0("
#10
1'
b10000000000000000000000000010000 4
b10000000000000000000000000010100 5
b10000000000000000000000000001100 6
b00000000000100000000000001110011 7
b00000 8
b00001 9
b00000 :
0>
b000000000001 K
b00000000000000000000000000001010 O
b00001 P
1Q
b10000000000000000000000000001000 R
b00000000001000001000000110110011 S
b00001 V
b00010 W
b00011 X
b00000000000000000000000000000000 Y
0^
b000000000010 g
b10 k
b01 l
b00000000000000000000000000011110 m
b00000000000000000000000000010100 o
b10000000000000000000000000001000 p
b00000000000000000000000000001010 r
b10000000000000000000000000000100 s
b00000001010000000000000100010011 t
b00000000000000000000000000010100 u
b10100 x
b00010 y
b000000010100 &!
b10000000000000000000000000000000 +!
b00000000101000000000000010010011 ,!
b00000000000000000000000000001010 -!
1/!
b000000001010 6!
b00000000000000000000000000000100 @!
b00000000000000000000000000001010 H!
b00000000000000000000000000001010 L!
b1110011 M!
1P!
0V!
b00000000000000000000000000000001 \!
b00000000000000000000000000000000 ]!
b00000000000000000000000000000000 ^!
b00000000000100000000000000000000 _!
b00000000000000000000100000000000 `!
b00000000000000000000000000000000 a!
1("
b10000000000000000000000000010000 *"
b00000000000100000000000001110011 +"
b00000000000000000000000000010100 -"
b00000000000000000000000000010100 3"
#11
0("
#12
b10000000000000000000000000010100 4
b10000000000000000000000000011000 5
b10000000000000000000000000010000 6
b00000000000000000000000000000000 7
b00000 9
b000000000000 K
b00000000000000000000000000010100 O
b00010 P
b10000000000000000000000000001100 R
b00000000000100000000000001110011 S
b00000 V
b00001 W
b00000 X
0Z
b000000000001 g
b00 k
b00 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 o
b10000000000000000000000000001100 p
b00000000000000000000000000000000 r
b10000000000000000000000000001000 s
b00000000001000001000000110110011 t
b00000000000000000000000000011110 u
b00000000000000000000000000010100 v
b00001 w
b00010 x
b00011 y
b000000000010 &!
b00000000000000000000000000001010 )!
b10000000000000000000000000000100 +!
b00000001010000000000000100010011 ,!
b00000000000000000000000000010100 -!
b000000010100 6!
b00000000000000000000000000000101 @!
b00000000000000000000000000000000 H!
b00000000000000000000000000000000 I!
b00000000000000000000000000000000 L!
b0000000 M!
0P!
b00000000000000000000000000000000 \!
b00000000000000000000000000000000 _!
b00000000000000000000000000000000 `!
b00000000000000000000000000001010 f!
1("
b10000000000000000000000000010100 *"
b00000000000000000000000000000000 +"
b00000000000000000000000000011110 -"
b00000000000000000000000000010100 /"
b00000000000000000000000000011110 3"
#13
0("
#14
b10000000000000000000000000011000 4
b10000000000000000000000000011100 5
b10000000000000000000000000010100 6
b00000000000000000000000000011110 O
b00011 P
b10000000000000000000000000010000 R
b00000000000000000000000000000000 S
b00000 W
b000000000000 g
b10000000000000000000000000010000 p
b10000000000000000000000000001100 s
b00000000000100000000000001110011 t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
b00000 w
b00001 x
b00000 y
0z
b000000000001 &!
b00000000000000000000000000000000 )!
b10000000000000000000000000001000 +!
b00000000001000001000000110110011 ,!
b00000000000000000000000000011110 -!
b000000000010 6!
b00000000000000000000000000001010 9!
b00000000000000000000000000000110 @!
b00000000000000000000000000010100 g!
1("
b10000000000000000000000000011000 *"
b00000000000000000000000000000000 -"
b00000000000000000000000000000000 /"
b00000000000000000000000000000000 3"
#15
0("
#16
1$
b10000000000000000000000000011100 4
b10000000000000000000000000100000 5
b10000000000000000000000000011000 6
b00000000000000000000000000000000 O
b00000 P
0Q
b10000000000000000000000000010100 R
b10000000000000000000000000010100 p
b10000000000000000000000000010000 s
b00000000000000000000000000000000 t
b00000 x
b000000000000 &!
b10000000000000000000000000001100 +!
b00000000000100000000000001110011 ,!
b00000000000000000000000000000000 -!
0/!
b000000000001 6!
b00000000000000000000000000000000 9!
b00000000000000000000000000000111 @!
b00000000000000000000000000011110 h!
1("
b10000000000000000000000000011100 *"
#17
0("
#18
0$
1&
0'
b10000000000000000000000000100000 4
b10000000000000000000000000100100 5
b10000000000000000000000000011100 6
b10000000000000000000000000011000 R
b10000000000000000000000000011000 p
b10000000000000000000000000010100 s
b10000000000000000000000000010000 +!
b00000000000000000000000000000000 ,!
b000000000000 6!
b00000000000000000000000000001000 @!
1C!
1("
b10000000000000000000000000100000 *"
